import Data.List
import Data.Maybe (isNothing)
import Control.Monad (guard)
import Text.Read (readMaybe)
import System.IO
-- set up the player symbols for the game
data Player = R | W 
    deriving (Eq)
instance Show Player where
    show R = "R"
    show W = "W"
type Board = [[Maybe Player]]

-- set up 3x4 board by creating the 1x4 list and then 3 x (1x4) list 
createBoard :: Board
createBoard = [ [Nothing | _ <- [1..4]] | _ <- [1..3] ]
-- When the game starts the board shows "-" not R or W 
showPlayer :: Maybe Player -> String
showPlayer = maybe "-" show
-- show what is the board look like
displayBoard :: Board -> IO ()
displayBoard board = do
  putStrLn "~~~~~~~~~~~~~~"
  putStrLn $ intercalate "\n \n" (zipWith createRow [0..] board)
  putStrLn "~~~~~~~~~~~~~~"

  where
    createRow :: Int -> [Maybe Player] -> String
    createRow rowNum row
      | rowNum == 1 = unwords [intercalate " T " (map showPlayer row)]
      | otherwise   = unwords [intercalate " | " (map showPlayer row)]

-- set up the wining combos for the game
winningCombos :: [[(Int, Int)]]
winningCombos =
  [ 
  --row wining combos
    [(0, 0), (0, 1), (0, 2), (0, 3)],
    [(1, 0), (1, 1), (1, 2), (1, 3)],
    [(2, 0), (2, 1), (2, 2), (2, 3)],
    -- column and diagonally wining combos
    [(0, 0), (1, 0), (2, 0)],
    [(0, 1), (1, 1), (2, 1)],
    [(0, 2), (1, 2), (2, 2)],
    [(0, 3), (1, 3), (2, 3)],
    [(0, 0), (1, 1), (2, 2)],
    [(0, 3), (1, 2), (2, 1)],
    [(0, 1), (1, 2), (2, 3)],
    [(0, 2), (1, 1), (2, 0)]
  ]

-- check if the player win 
-- so the this function using to scan the row and column to check the player met the winning Combos
checkWinner :: Player -> Board -> Bool
checkWinner player board
  | any (all (\(x, y) -> board !! x !! y == Just player)) winningCombos = True
  | otherwise = False

-- check if the player draw 
--so when the board is full and no one wins then will return draw
checkDraw :: Board -> Bool
checkDraw board
  | sum (map (length . filter isNothing) board) == 0 = True
  | otherwise = False

-- when the game is draw or player win then stop the game
gameCondition :: Board -> Bool
gameCondition board
  | checkDraw board = True
  | checkWinner R board || checkWinner W board = True
  | otherwise = False

--this is the guard method to check whether the game is over. This guard method is the same as the if-statement check condition if you meet that condition then do that.
checkGameOver :: Board -> IO ()
checkGameOver board
  | checkWinner R board = putStrLn "Player R wins!"
  | checkWinner W board = putStrLn "Player W wins!" 
  | checkDraw board      = putStrLn "It's a draw!" 
  | otherwise            = return ()

-- check position is emty or not if not then no allow the pleyer go that position
availableMoves :: Board -> [(Int, Int)]
availableMoves board = [(x, y) | x <- [0 .. 2], y <- [0 .. 3], case board !! x !! y of Just _ -> False; Nothing -> True]
-- check the player is vaild  move
validMove :: String -> Maybe Int
validMove input = readMaybe input >>= \n -> guard (n >= 1 && n <= 12) >> return n

--use to update the player move to the board
updateList :: [a] -> Int -> (a -> a) -> [a]
updateList list index update = take index list ++ [update (list !! index)] ++ drop (index + 1) list

-- board position coordinates to row and column
positionToCoordinates :: Int -> (Int, Int)
positionToCoordinates position = ((position - 1) `div` 4, (position - 1) `mod` 4)

-- this function update the player move in the board
makeMove :: Board -> Player -> Int -> Board
makeMove board player position
  | position >= 1 && position <= 12 && case linearizedBoard !! (position - 1) of { Nothing -> True; _ -> False } =
    updateList board row (\r -> updateList r col (\_ -> Just player))
  | otherwise = board
  where
    (row, col) = positionToCoordinates position
    linearizedBoard = concat board


  -- use to switch to the other player
switchPlayer :: Player -> Player
switchPlayer R = W
switchPlayer W = R

-- using the recursion instead of loops for the game function
game :: Board -> Player -> IO ()
game board player = do
  displayBoard board
  case gameCondition board of
    True -> checkGameOver board 
    --if the gaem not over do this
    False -> do
      putStrLn $ "Player " ++ show player ++ ", Enter your move (1-12): "
      input <- getLine
      let move = validMove input
      case move of
        Just playerMove
          | playerMove `elem` map (\(x, y) -> x * 4 + y + 1) (availableMoves board) ->
            game (makeMove board player playerMove) (switchPlayer player)
            --recursive the game function
        _ -> putStrLn "Invalid move. Try again." >> game board player


main :: IO ()
main = do
  putStrLn "Welcome to the version 21370916 tic-tac-toe game"
  -- create board and set the current player to R
  game createBoard R
